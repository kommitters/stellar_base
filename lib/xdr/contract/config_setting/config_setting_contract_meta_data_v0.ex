defmodule StellarBase.XDR.ConfigSettingContractMetaDataV0 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigSettingContractMetaDataV0` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Uint32,
    Int64
  }

  @struct_spec XDR.Struct.new(
                 tx_max_extended_meta_data_size_bytes: Uint32,
                 fee_extended_meta_data1_kb: Int64
               )

  @type tx_max_extended_meta_data_size_bytes_type :: Uint32.t()
  @type fee_extended_meta_data1_kb_type :: Int64.t()

  @type t :: %__MODULE__{
          tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes_type(),
          fee_extended_meta_data1_kb: fee_extended_meta_data1_kb_type()
        }

  defstruct [:tx_max_extended_meta_data_size_bytes, :fee_extended_meta_data1_kb]

  @spec new(
          tx_max_extended_meta_data_size_bytes :: tx_max_extended_meta_data_size_bytes_type(),
          fee_extended_meta_data1_kb :: fee_extended_meta_data1_kb_type()
        ) :: t()
  def new(
        %Uint32{} = tx_max_extended_meta_data_size_bytes,
        %Int64{} = fee_extended_meta_data1_kb
      ),
      do: %__MODULE__{
        tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
        fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
      }

  @impl true
  def encode_xdr(%__MODULE__{
        tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
        fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
      }) do
    [
      tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
      fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{
        tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
        fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
      }) do
    [
      tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
      fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok,
       {%XDR.Struct{
          components: [
            tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
            fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
          ]
        }, rest}} ->
        {:ok, {new(tx_max_extended_meta_data_size_bytes, fee_extended_meta_data1_kb), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{
       components: [
         tx_max_extended_meta_data_size_bytes: tx_max_extended_meta_data_size_bytes,
         fee_extended_meta_data1_kb: fee_extended_meta_data1_kb
       ]
     }, rest} = XDR.Struct.decode_xdr!(bytes, struct)

    {new(tx_max_extended_meta_data_size_bytes, fee_extended_meta_data1_kb), rest}
  end
end
