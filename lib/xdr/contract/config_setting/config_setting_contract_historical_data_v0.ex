defmodule StellarBase.XDR.ConfigSettingContractHistoricalDataV0 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigSettingContractHistoricalDataV0` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Int64
  }

  @struct_spec XDR.Struct.new(fee_historical1_kb: Int64)

  @type fee_historical1_kb_type :: Int64.t()

  @type t :: %__MODULE__{fee_historical1_kb: fee_historical1_kb_type()}

  defstruct [:fee_historical1_kb]

  @spec new(fee_historical1_kb :: fee_historical1_kb_type()) :: t()
  def new(%Int64{} = fee_historical1_kb),
    do: %__MODULE__{fee_historical1_kb: fee_historical1_kb}

  @impl true
  def encode_xdr(%__MODULE__{fee_historical1_kb: fee_historical1_kb}) do
    [fee_historical1_kb: fee_historical1_kb]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{fee_historical1_kb: fee_historical1_kb}) do
    [fee_historical1_kb: fee_historical1_kb]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [fee_historical1_kb: fee_historical1_kb]}, rest}} ->
        {:ok, {new(fee_historical1_kb), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [fee_historical1_kb: fee_historical1_kb]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)

    {new(fee_historical1_kb), rest}
  end
end
