defmodule StellarBase.XDR.ConfigSettingContractComputeV0 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigSettingContractComputeV0` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Int64,
    Uint32
  }

  @struct_spec XDR.Struct.new(
                 ledger_max_instructions: Int64,
                 tx_max_instructions: Int64,
                 fee_rate_per_instructions_increment: Int64,
                 tx_memory_limit: Uint32
               )

  @type ledger_max_instructions_type :: Int64.t()
  @type tx_max_instructions_type :: Int64.t()
  @type fee_rate_per_instructions_increment_type :: Int64.t()
  @type tx_memory_limit_type :: Uint32.t()

  @type t :: %__MODULE__{
          ledger_max_instructions: ledger_max_instructions_type(),
          tx_max_instructions: tx_max_instructions_type(),
          fee_rate_per_instructions_increment: fee_rate_per_instructions_increment_type(),
          tx_memory_limit: tx_memory_limit_type()
        }

  defstruct [
    :ledger_max_instructions,
    :tx_max_instructions,
    :fee_rate_per_instructions_increment,
    :tx_memory_limit
  ]

  @spec new(
          ledger_max_instructions :: ledger_max_instructions_type(),
          tx_max_instructions :: tx_max_instructions_type(),
          fee_rate_per_instructions_increment :: fee_rate_per_instructions_increment_type(),
          tx_memory_limit :: tx_memory_limit_type()
        ) :: t()
  def new(
        %Int64{} = ledger_max_instructions,
        %Int64{} = tx_max_instructions,
        %Int64{} = fee_rate_per_instructions_increment,
        %Uint32{} = tx_memory_limit
      ),
      do: %__MODULE__{
        ledger_max_instructions: ledger_max_instructions,
        tx_max_instructions: tx_max_instructions,
        fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
        tx_memory_limit: tx_memory_limit
      }

  @impl true
  def encode_xdr(%__MODULE__{
        ledger_max_instructions: ledger_max_instructions,
        tx_max_instructions: tx_max_instructions,
        fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
        tx_memory_limit: tx_memory_limit
      }) do
    [
      ledger_max_instructions: ledger_max_instructions,
      tx_max_instructions: tx_max_instructions,
      fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
      tx_memory_limit: tx_memory_limit
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{
        ledger_max_instructions: ledger_max_instructions,
        tx_max_instructions: tx_max_instructions,
        fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
        tx_memory_limit: tx_memory_limit
      }) do
    [
      ledger_max_instructions: ledger_max_instructions,
      tx_max_instructions: tx_max_instructions,
      fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
      tx_memory_limit: tx_memory_limit
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok,
       {%XDR.Struct{
          components: [
            ledger_max_instructions: ledger_max_instructions,
            tx_max_instructions: tx_max_instructions,
            fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
            tx_memory_limit: tx_memory_limit
          ]
        }, rest}} ->
        {:ok,
         {new(
            ledger_max_instructions,
            tx_max_instructions,
            fee_rate_per_instructions_increment,
            tx_memory_limit
          ), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{
       components: [
         ledger_max_instructions: ledger_max_instructions,
         tx_max_instructions: tx_max_instructions,
         fee_rate_per_instructions_increment: fee_rate_per_instructions_increment,
         tx_memory_limit: tx_memory_limit
       ]
     }, rest} = XDR.Struct.decode_xdr!(bytes, struct)

    {new(
       ledger_max_instructions,
       tx_max_instructions,
       fee_rate_per_instructions_increment,
       tx_memory_limit
     ), rest}
  end
end
