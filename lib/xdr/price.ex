defmodule StellarBase.XDR.Price do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Price` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Int32

  @struct_spec XDR.Struct.new(
                 n: Int32,
                 d: Int32
               )

  @type n_type :: Int32.t()
  @type d_type :: Int32.t()

  @type t :: %__MODULE__{n: n_type(), d: d_type()}

  defstruct [:n, :d]

  @spec new(n :: n_type(), d :: d_type()) :: t()
  def new(
        %Int32{} = n,
        %Int32{} = d
      ),
      do: %__MODULE__{n: n, d: d}

  @impl true
  def encode_xdr(%__MODULE__{n: n, d: d}) do
    [n: n, d: d]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{n: n, d: d}) do
    [n: n, d: d]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [n: n, d: d]}, rest}} ->
        {:ok, {new(n, d), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [n: n, d: d]}, rest} = XDR.Struct.decode_xdr!(bytes, struct)
    {new(n, d), rest}
  end
end
