defmodule StellarBase.XDR.LedgerFootprint do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `LedgerFootprint` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.LedgerKeyList

  @struct_spec XDR.Struct.new(
                 read_only: LedgerKeyList,
                 read_write: LedgerKeyList
               )

  @type read_only_type :: LedgerKeyList.t()
  @type read_write_type :: LedgerKeyList.t()

  @type t :: %__MODULE__{read_only: read_only_type(), read_write: read_write_type()}

  defstruct [:read_only, :read_write]

  @spec new(read_only :: read_only_type(), read_write :: read_write_type()) :: t()
  def new(
        %LedgerKeyList{} = read_only,
        %LedgerKeyList{} = read_write
      ),
      do: %__MODULE__{read_only: read_only, read_write: read_write}

  @impl true
  def encode_xdr(%__MODULE__{read_only: read_only, read_write: read_write}) do
    [read_only: read_only, read_write: read_write]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{read_only: read_only, read_write: read_write}) do
    [read_only: read_only, read_write: read_write]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [read_only: read_only, read_write: read_write]}, rest}} ->
        {:ok, {new(read_only, read_write), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [read_only: read_only, read_write: read_write]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)

    {new(read_only, read_write), rest}
  end
end
