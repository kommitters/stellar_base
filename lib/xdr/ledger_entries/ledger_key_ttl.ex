defmodule StellarBase.XDR.LedgerKeyTTL do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten
  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr
  Representation of Stellar `LedgerKeyTTL` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Hash

  @struct_spec XDR.Struct.new(key_hash: Hash)

  @type key_hash_type :: Hash.t()

  @type t :: %__MODULE__{key_hash: key_hash_type()}

  defstruct [:key_hash]

  @spec new(key_hash :: key_hash_type()) :: t()
  def new(%Hash{} = key_hash),
    do: %__MODULE__{key_hash: key_hash}

  @impl true
  def encode_xdr(%__MODULE__{key_hash: key_hash}) do
    [key_hash: key_hash]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{key_hash: key_hash}) do
    [key_hash: key_hash]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [key_hash: key_hash]}, rest}} ->
        {:ok, {new(key_hash), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [key_hash: key_hash]}, rest} = XDR.Struct.decode_xdr!(bytes, struct)
    {new(key_hash), rest}
  end
end
