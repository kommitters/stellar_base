defmodule StellarBase.XDR.Curve25519Public do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Curve25519Public` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Opaque32

  @struct_spec XDR.Struct.new(key: Opaque32)

  @type key_type :: Opaque32.t()

  @type t :: %__MODULE__{key: key_type()}

  defstruct [:key]

  @spec new(key :: key_type()) :: t()
  def new(%Opaque32{} = key),
    do: %__MODULE__{key: key}

  @impl true
  def encode_xdr(%__MODULE__{key: key}) do
    [key: key]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{key: key}) do
    [key: key]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [key: key]}, rest}} ->
        {:ok, {new(key), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [key: key]}, rest} = XDR.Struct.decode_xdr!(bytes, struct)
    {new(key), rest}
  end
end
