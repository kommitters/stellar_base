defmodule StellarBase.XDR.SendMore do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SendMore` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Uint32

  @struct_spec XDR.Struct.new(num_messages: Uint32)

  @type num_messages_type :: Uint32.t()

  @type t :: %__MODULE__{num_messages: num_messages_type()}

  defstruct [:num_messages]

  @spec new(num_messages :: num_messages_type()) :: t()
  def new(%Uint32{} = num_messages),
    do: %__MODULE__{num_messages: num_messages}

  @impl true
  def encode_xdr(%__MODULE__{num_messages: num_messages}) do
    [num_messages: num_messages]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{num_messages: num_messages}) do
    [num_messages: num_messages]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [num_messages: num_messages]}, rest}} ->
        {:ok, {new(num_messages), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [num_messages: num_messages]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)

    {new(num_messages), rest}
  end
end
