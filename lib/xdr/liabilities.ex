defmodule StellarBase.XDR.Liabilities do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Liabilities` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Int64

  @struct_spec XDR.Struct.new(
                 buying: Int64,
                 selling: Int64
               )

  @type buying_type :: Int64.t()
  @type selling_type :: Int64.t()

  @type t :: %__MODULE__{buying: buying_type(), selling: selling_type()}

  defstruct [:buying, :selling]

  @spec new(buying :: buying_type(), selling :: selling_type()) :: t()
  def new(
        %Int64{} = buying,
        %Int64{} = selling
      ),
      do: %__MODULE__{buying: buying, selling: selling}

  @impl true
  def encode_xdr(%__MODULE__{buying: buying, selling: selling}) do
    [buying: buying, selling: selling]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{buying: buying, selling: selling}) do
    [buying: buying, selling: selling]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [buying: buying, selling: selling]}, rest}} ->
        {:ok, {new(buying, selling), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [buying: buying, selling: selling]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)

    {new(buying, selling), rest}
  end
end
