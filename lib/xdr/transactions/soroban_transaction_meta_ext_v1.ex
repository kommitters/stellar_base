defmodule StellarBase.XDR.SorobanTransactionMetaExtV1 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SorobanTransactionMetaExtV1` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ExtensionPoint,
    Int64
  }

  @struct_spec XDR.Struct.new(
                 ext: ExtensionPoint,
                 total_non_refundable_resource_fee_charged: Int64,
                 total_refundable_resource_fee_charged: Int64,
                 rent_fee_charged: Int64
               )

  @type ext_type :: ExtensionPoint.t()
  @type total_non_refundable_resource_fee_charged_type :: Int64.t()
  @type total_refundable_resource_fee_charged_type :: Int64.t()
  @type rent_fee_charged_type :: Int64.t()

  @type t :: %__MODULE__{
          ext: ext_type(),
          total_non_refundable_resource_fee_charged:
            total_non_refundable_resource_fee_charged_type(),
          total_refundable_resource_fee_charged: total_refundable_resource_fee_charged_type(),
          rent_fee_charged: rent_fee_charged_type()
        }

  defstruct [
    :ext,
    :total_non_refundable_resource_fee_charged,
    :total_refundable_resource_fee_charged,
    :rent_fee_charged
  ]

  @spec new(
          ext :: ext_type(),
          total_non_refundable_resource_fee_charged ::
            total_non_refundable_resource_fee_charged_type(),
          total_refundable_resource_fee_charged :: total_refundable_resource_fee_charged_type(),
          rent_fee_charged :: rent_fee_charged_type()
        ) :: t()
  def new(
        %ExtensionPoint{} = ext,
        %Int64{} = total_non_refundable_resource_fee_charged,
        %Int64{} = total_refundable_resource_fee_charged,
        %Int64{} = rent_fee_charged
      ),
      do: %__MODULE__{
        ext: ext,
        total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
        total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
        rent_fee_charged: rent_fee_charged
      }

  @impl true
  def encode_xdr(%__MODULE__{
        ext: ext,
        total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
        total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
        rent_fee_charged: rent_fee_charged
      }) do
    [
      ext: ext,
      total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
      total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
      rent_fee_charged: rent_fee_charged
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{
        ext: ext,
        total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
        total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
        rent_fee_charged: rent_fee_charged
      }) do
    [
      ext: ext,
      total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
      total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
      rent_fee_charged: rent_fee_charged
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok,
       {%XDR.Struct{
          components: [
            ext: ext,
            total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
            total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
            rent_fee_charged: rent_fee_charged
          ]
        }, rest}} ->
        {:ok,
         {new(
            ext,
            total_non_refundable_resource_fee_charged,
            total_refundable_resource_fee_charged,
            rent_fee_charged
          ), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{
       components: [
         ext: ext,
         total_non_refundable_resource_fee_charged: total_non_refundable_resource_fee_charged,
         total_refundable_resource_fee_charged: total_refundable_resource_fee_charged,
         rent_fee_charged: rent_fee_charged
       ]
     }, rest} = XDR.Struct.decode_xdr!(bytes, struct)

    {new(
       ext,
       total_non_refundable_resource_fee_charged,
       total_refundable_resource_fee_charged,
       rent_fee_charged
     ), rest}
  end
end
